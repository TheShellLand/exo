** SmartOS
*** MANPAGE : vmadm
**** Properties

       Every VM has a number of properties. The properties for a VM can be listed
       with the 'vmadm get <uuid>' command. Some of these properties can be
       included in a create payload, some can be included in the output or be used
       to sort output for the 'vmadm list' command. Not all fields will be
       included for all VMs. Below the fields are marked as:

           type -- type of the properties value.

           vmtype -- types of VM (KVM, LX, OS) for which this property applies.

           listable -- if they can be included in the -o or -s lists for the
                       'vmadm list' command.

           create -- if the field can be included in a create payload.

           update -- if the field can be updated using the 'vmadm update' command.
                     Some fields are also marked (live update) in which case,
                     updates affect the behaviour of the running machine. Other
                     updatable fields will either not affect VM operation or
                     require a reboot of the VM to do so.

           default -- if the field has a default value, this will explain what
                      that value is.


       alias:

           An alias for a VM which is for display/lookup purposes only. Not
           required to be unique.

           type: string
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes

       archive_on_delete:

           When archive_on_delete is set to 'true' and the VM is deleted and the
           zones/archive dataset exists and is mounted on /zones/archive, we will
           extract debug information from the zone before destroying it.
           Information saved includes cores, the JSON as output by 'vmadm get',
           the zone's XML file from /etc/zones, SMF logs, qemu logs (for KVM),
           the startvm script (for KVM), the properties from all the zone's
           datasets, metadata, tags and /var/adm/messages. In the future the list
           may change. The files specified will be written to the directory
           /zones/archives/<uuid>.

           type: boolean
           vmtype: OS,KVM
           listable: no
           create: yes
           update: yes
           default: false

       autoboot:

           Controls whether or not a VM is booted when the system is rebooted.
           This property can be set with the initial create but any time the VM is
           started this will also get set true and when the VM is stopped it will
           get set false. This is to ensure that the compute node will always
           reboot into the intended state.

           type: boolean
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes

       billing_id:

           An identifier intended to help identify which billing category this VM
           should fall into.

           type: string (UUID)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes
           default: 00000000-0000-0000-0000-000000000000

       boot:

           This option allows you to set the boot order for KVM VMs. The format is
           the same as described above for the order parameter to the 'start'
           command.

           type: string
           vmtype: KVM
           listable: no
           create: yes
           update: yes
           default: 'order=cd'

       boot_timestamp:

           This is a read-only property that will exist only for running VMs. When
           available, it will indicate the time the VM last booted.

           type: string (ISO 8601 timestamp)
           vmtype: OS,KVM
           listable: yes
           create: no
           update: no

       brand:

           This will be one of 'joyent', 'joyent-minimal' or 'sngl' for OS
           virtualization and 'kvm' for full hardware virtualization. This is a
           required value for VM creation.

           type: string (joyent|joyent-minimal|kvm|sngl)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: no

       cpu_cap:

           Sets a limit on the amount of CPU time that can be used by a VM. The
           unit used is the percentage of a single CPU that can be used by the VM.
           Eg. a value of 300 means up to 3 full CPUs.

           type: integer (percentage of single CPUs)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes (live update)

       cpu_shares:

           Sets a limit on the number of fair share scheduler (FSS) CPU shares for
           a VM. This value is relative to all other VMs on the system, so a value
           only has meaning in relation to other VMs. If you have one VM with a
           a value 10 and another with a value of 50, the VM with 50 will get 5x
           as much time from the scheduler as the one with 10 when there is
           contention.

           type: integer (number of shares)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes (live update)
           default: 100

       cpu_type:

           For KVM VMs, this controls the type of the virtual CPU exposed to the
           guest. If the value is 'host' the guest will see the same CPU type and
           flags as are seen on the host.

           type: string (qemu64|host)
           listable: yes
           vmtype: KVM
           create: yes
           update: yes
           default: qemu64

       create_timestamp:

           The time at which the VM was created in ISO 8601 format.

           type: string (format: '2011-12-31T06:38:42.457Z')
           vmtype: OS,KVM
           listable: yes
           create: no (automatically added)
           update: no
           default: always set to current time at VM.create().

       server_uuid:

           This is the UUID of the compute node on which the VM currently exists.
           It is most useful when pulled from sources external to the GZ (whether
           in the VM, or from another node).

           type: string (compute node's UUID)
           vmtype: OS,KVM
           listable: no
           create: no
           update: no
           default: this is always pulled when the object is loaded.

       customer_metadata:

           This field allows metadata to be set and associated with this VM. The
           value should be an object with only top-level key=value pairs.

           NOTE1: for historical reasons, do not put keys in here that match the
           pattern *_pw. Those keys should go in internal_metadata instead.

           NOTE2: keys that are prefixed with one of the prefixes listed in
           internal_metadata_namespaces will not be read from customer_metadata but
           rather from internal_metadata. These will also be read-only from within
           the zone.

           type: JSON Object (key: value)
           vmtype: OS,KVM
           listable: no
           create: yes
           update: yes (but see special notes on update command)
           default: {}

       datasets:

           If a VM has extra datasets available to it (eg. if you specified the
           delegate_dataset option when creating) the list and get output will
           include the information about that dataset under this key.

           type: string (dataset name)
           vmtype: OS
           listable: no
           create: no (use delegate_dataset to include one)
           update: no

       delegate_dataset:

           This property indicates whether we should delegate a ZFS dataset to an
           OS VM. If true, the VM will get a dataset <zoneroot dataset>/data (by
           default: zones/<uuid>/data) added to it. This dataset will be also be
           mounted on /<zoneroot dataset>/data inside the zone (again by default:
           /zones/<uuid>/data) but you can change this by setting the mountpoint
           option on the dataset from within the zone with zfs(1M). When using
           this option, sub-datasets can be created, snapshots can be taken and
           many other options can be performed on this dataset from within the
           VM.

           type: boolean
           vmtype: OS
           listable: no
           create: yes
           update: no
           default: false

       disks:

           When creating a KVM VM or getting a KVM VM's JSON, you will use this
           property. This is an array of 'disk' objects. The properties available
           are listed below under the disks.*.<property> options. If you want to
           update disks, see the special notes in the section above about the
           'upgrade' command.

           When adding or removing disks, the disks will be available to the VM in
           the order that the disks are included in the disks or add_disks array.

           To use these properties in a list output or lookup, use the format:

             disks.*.size   # for lookup matching any disk
             disks.0.size   # for list output or lookup of a specific disk

       disks.*.block_size:

           Specifies the block size for the disk. This property can only be set at
           disk creation time and cannot be changed without destroying the disk
           and creating a new one.

           Important: this property cannot be set on disks that have an image_uuid
           parameter as the image being cloned will already have the ZFS
           volblocksize property set.

           type: integer (block size in bytes, 512 to 131072, must be power of 2)
           vmtype: KVM
           listable: no
           create: yes
           update: no (except when adding new disks)
           default: 8192

       disks.*.boot:

           Specifies whether this disk should be bootable (only one disk should).

           type: boolean
           vmtype: KVM
           listable: yes (see above)
           create: yes
           update: yes (special, see description in 'update' section above)
           default: no

       disks.*.compression:

           Specifies a compression algorithm used for this disk. This has the same
           details, warnings and caveats as the global zfs_root_compression option
           below but only affects a single disk on the VM.

           See zfs_root_compression section below for more details.

           type: string one of: "on,off,gzip,gzip-N,lz4,lzjb,zle"
           vmtype: KVM
           listable: no
           create: yes
           update: yes (see caveat in zfs_root_compression section below)
           default: off

       disks.*.nocreate:

           This parameter indicates whether or not the disk should be created. It
           only makes sense for disks with media type 'disk'. For media type
           'cdrom' the device is not created. It also can only be set when
           creating a disk.

           type: boolean
           vmtype: KVM
           listable: no
           create: yes
           update: no (except when adding new disks)
           default: false (new zvol is created when media type is 'disk')

       disks.*.image_name:

           Name of dataset from which to clone this VM's disk. You should specify
           either this and 'image_size' and 'image_uuid', or 'size' for a disk.

           type: string
           vmtype: KVM
           listable: yes (see above)
           create: yes
           update: yes (special, see description in 'update' section above)
           default: no

       disks.*.image_size:

           The size of the image from which we will create this disk. When neither
           size nor image_size is passed for a disk but an image_uuid is, and that
           image is available through imgadm, the image_size value from the
           manifest will be set as image_size.

           Important: image_size is required (unless you rely on imgadm) when you
           include image_uuid for a disk and not allowed when you don't.

           type: integer (size in MiB)
           vmtype: KVM
           listable: yes (see above)
           create: yes
           update: yes (special, see description in 'update' section above)
           default: no (loaded from imgadm if possible)

       disks.*.image_uuid:

           UUID of dataset from which to clone this VM's disk. Note: this image's
           UUID must show up in the 'imgadm list' output in order to be valid.

           type: string (UUID)
           vmtype: KVM
           listable: yes (see above)
           create: yes
           update: yes (special, see description in 'update' section above)
           default: no

       disks.*.refreservation:

           Specifies a refreservation for this disk. This property controls the
           minimum amount of space reserved for a given disk.  See also the zfs(1)
           man page's description of refreservation.

           type: integer number of MiB
           vmtype: KVM
           listable: no
           create: yes
           update: yes (special, see description in 'update' section above)
           default: size of the disk

       disks.*.size:

           Size of disk in MiB. You should only specify this parameter if you've
           not included the image_* parameters. It will show up in get requests
           for all disks whether you've specified or not as a means to determine
           the size of the zvol.

           Important: size is required when you don't include image_uuid for a disk
           and not allowed when you do.

           type: integer (size in MiB)
           vmtype: KVM
           listable: yes (see above)
           create: yes
           update: yes (special, see description in 'update' section above)
           default: no

       disks.*.media:

           Specify whether this disk is a 'disk' or 'cdrom'.

           type: string (one of ['disk','cdrom'])
           vmtype: KVM
           listable: yes (see above)
           create: yes
           update: yes (special, see description in 'update' section above)
           default: disk

       disks.*.model:

           Specify the driver for this disk. If your image supports it, you should
           use virtio. If not, use ide or scsi depending on the drivers in your
           guest.

           type: string (one of ['virtio','ide','scsi'])
           vmtype: KVM
           listable: yes (see above)
           create: yes
           update: yes (special, see description in 'update' section above)
           default: the value of the disk_driver parameter for this VM

       disks.*.zpool:

           The zpool in which to create this zvol.

           type: string (zpool name)
           vmtype: KVM
           listable: yes (see above)
           create: yes
           update: yes (special, see description in 'update' section above)
           default: zones

       disk_driver:

           This specifies the default values for disks.*.model for disks attached
           to this VM.

           type: string (one of ['virtio','ide','scsi'])
           vmtype: KVM
           listable: no
           create: yes
           update: yes

       do_not_inventory:

           This specifies that the VM should not be counted or automatically
           imported into external management tools. The primary use-case is for
           test zones that are created but you don't want their existence
           propagated up to a management system since they'll be short-lived.

           Note: this property will only show up in a 'vmadm get' when it's set
           true. When set false the property will not appear.

           type: boolean
           vmtype: OS,KVM
           listable: no
           create: yes
           update: yes

       dns_domain:

           For OS VMs this specifies the domain value for /etc/hosts that gets set
           at create time. Updating this after create will have no effect.

           type: string (domain name)
           vmtype: OS
           listable: yes
           create: yes
           update: no
           default: local

       filesystems:

           This property can be used to mount additional filesystems into an OS
           VM. It is primarily intended for SDC special VMs. The value is an
           array of objects. The properties available are listed below under the
           filesystems.*.<property> options. Those objects can have the following
           properties: source, target, raw (optional), type and options.

       filesystems.*.type:

           For OS VMs this specifies the type of the filesystem being mounted in.
           Example: lofs

           type: string (fs type)
           vmtype: OS
           listable: no
           create: yes
           update: no

       filesystems.*.source:

           For OS VMs this specifies the directory in the global zone of the
           filesystem being mounted in.  Example: /pool/somedirectory

           type: string (path)
           vmtype: OS
           listable: no
           create: yes
           update: no

       filesystems.*.target:

           For OS VMs this specifies the directory inside the Zone where this
           filesystem should be mounted.  Example: /somedirectory

           type: string (path)
           vmtype: OS
           listable: no
           create: yes
           update: no

       filesystems.*.raw:

           For OS VMs this specifies the additional raw device that should be
           associated with the source filesystem.  Example: /dev/rdsk/somedisk

           type: string (device)
           vmtype: OS
           listable: no
           create: yes
           update: no

       filesystems.*.options:

           For OS VMs this specifies the array of mount options for this file
           system when it is mounted into the zone.  Examples of options include:
           "ro" and "nodevices".

           type: array of strings (each string is an option)
           vmtype: OS
           listable: no
           create: yes
           update: no

       firewall_enabled:

           This enables the firewall for this VM, allowing firewall rules set
           by fwadm(1M) to be applied.

           Note: this property will only show up in a 'vmadm get' when it's set
           true. When set false the property will not appear.

           type: boolean
           vmtype: OS
           listable: no
           create: yes
           update: yes

       fs_allowed:

           This option allows you to specify filesystem types this zone is allowed
           to mount.  For example on a zone for building SmartOS you probably want
           to set this to: "ufs,pcfs,tmpfs".  To unset this property, set the
           value to the empty string.

           type: string (comma separated list of filesystem types)
           vmtype: OS
           listable: no
           create: yes
           update: yes (requires zone reboot to take effect)

       hostname:

           For KVM VMs, this value will be handed out via DHCP as the hostname for
           the VM. For OS VMs, this value will get set in several files at
           creation time, but changing it later will do nothing.

           type: string (hostname)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes (but does nothing for OS VMs)
           default: the value of zonename

       image_uuid:

           This should be a UUID identifying the image for the VM if a VM was
           created from an image.

           NOTE: when this is passed for KVM VMs, it specifies the *zone root*
           dataset which is not visible from within the VM. The user-visible
           dataset will be the one specified through the disks.*.image_uuid.
           Normally you do *not* want to set this for KVM.

           type: string (UUID)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: no

       internal_metadata:

           This field allows metadata to be set and associated with this VM. The
           value should be an object with only top-level key=value pairs. The
           intention is that customer_metadata contain customer modifiable keys
           whereas internal_metadata is for operator generated keys.

           NOTE: for historical reasons, when a user in a zone does:

               mdata-get name_pw

           where the key ends with '_pw', the key is looked up in internal_metadata
           instead of customer_metadata.

           type: JSON Object (key: value)
           vmtype: OS,KVM
           listable: no
           create: yes
           update: yes (but see special notes on update command)
           default: {}

       internal_metadata_namespaces:

           This allows a list of namespaces to be set as internal_metadata-only
           prefixes. If a namespace 'foo' is in this list, metadata keys with the
           prefix 'foo:' will come from internal_metadata rather than
           customer_metadata. They will also be read-only from within the zone.

           type: list of strings
           vmtype: OS,KVM
           listable: no
           create: yes
           update: yes
           default: []

       indestructible_delegated:

           When set this property adds an @indestructible snapshot to the delegated
           (<zfs_filesystem>/data) dataset and sets a zfs hold on that snapshot.
           This hold must be removed before the VM can be deleted enabling a
           two-step deletion. Eg. to delete a VM where this has been set, you would
           need to:

               vmadm update <uuid> indestructible_delegated=false
               vmadm delete <uuid>

           instead of being able to do the delete on its own. The property will
           only show up in VM objects when set true.

           NOTE: if the hold on the @indestructible dataset is removed manually
           from the GZ or from within the zone, this would also remove this flag
           and allow the VM to be deleted.

           type: boolean
           vmtype: KVM,LX,OS
           listable: yes
           create: yes
           update: yes
           default: false

       indestructible_zoneroot:

           When set this property adds an @indestructible snapshot to the zoneroot
           (zfs_filesystem) dataset and sets a zfs hold on that snapshot. This hold
           must be removed before the VM can be deleted *or reprovisioned*. Eg. to
           delete a VM where this has been set, you would need to:

               vmadm update <uuid> indestructible_zoneroot=false
               vmadm delete <uuid>

           instead of being able to do the delete on its own. The property will
           only show up in VM objects when set true.

           NOTE: if the hold on the @indestructible dataset is removed manually
           from the GZ, this would also remove this flag and allow the VM to be
           deleted.

           type: boolean
           vmtype: KVM,LX,OS
           listable: yes
           create: yes
           update: yes
           default: false

       kernel_version:

           This sets the version of Linux to emulate for LX VMs.

           type: string (kernel version, eg. 2.6.31)
           vmtype: LX
           listable: no
           create: no
           update: yes

       limit_priv:

           This sets a list of privileges that will be available to the Zone that
           contains this VM. See privileges(5) for details on possible privileges.

           type: string (comma separated list of zone privileges)
           vmtype: OS,KVM
           listable: no
           create: yes
           update: yes
           OS default: "default"
           KVM default: "default,-file_link_any,-net_access,-proc_fork,-proc_info,-proc_session"

       maintain_resolvers:

           If set, the resolvers in /etc/resolv.conf inside the VM will be updated
           when the resolvers property is updated.

           type: boolean
           vmtype: OS
           listable: no
           create: yes
           update: yes
           default: false

       max_locked_memory:

           The total amount of physical memory in the host than can be locked for
           this VM. This value cannot be higher than max_physical_memory.

           type: integer (number of MiB)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes (live update)
           default: value of max_physical_memory

       max_lwps:

           The maximum number of lightweight processes this VM is allowed to have
           running on the host.

           type: integer (number of LWPs)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes (live update)
           default: 2000

       max_physical_memory:

           The maximum amount of memory on the host that the VM is allowed to use.
           For KVM VMs, this value cannot be lower than 'ram' and should be
           ram + 1024.

           type: integer (number of MiB)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes (live update)
           default: 256 for OS VMs, (ram size + 1024) for KVM VMs.

       max_swap:

           The maximum amount of virtual memory the VM is allowed to use.  This
           cannot be lower than max_physical_memory, nor can it be lower than 256.

           type: integer (number of MiB)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes (live update)
           default: value of max_physical_memory or 256, whichever is higher.

       mdata_exec_timeout:

           For OS VMs this parameter adjusts the timeout on the start method of
           the svc:/smartdc/mdata:execute service running in the zone. This is the
           service which runs user-script scripts.

           This parameter only makes sense when creating a VM and is ignored
           in other cases.

           type: integer (0 for unlimited, >0 number of seconds)
           vmtype: OS
           listable: no
           create: yes
           update: no
           default: 300

       nics:

           When creating a KVM VM or getting a KVM VM's JSON, you will use this
           property. This is an array of 'nic' objects. The properties available
           are listed below under the nics.*.<property> options. If you want to
           update nics, see the special notes in the section above about the
           'upgrade' command.

           When adding or removing NICs, the NIC names will be created in the
           order the interfaces are in the nics or add_nics array.

           To use these properties in a list output or lookup, use the format:

             nics.*.ip   # for lookup matching any interface
             nics.0.ip   # for list output or lookup of a specific interface

       nics.*.allow_dhcp_spoofing:

           With this property set to true, this VM will be able to operate as a
           DHCP server on this interface.  Without this, some of the packets
           required of a DHCP server will not get through.

           type: boolean
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes
           default: false

       nics.*.allow_ip_spoofing:

           With this property set to true, this VM will be able to send and
           receive packets over this nic that don't match the IP address
           specified by the ip property.

           type: boolean
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes
           default: false

       nics.*.allow_mac_spoofing:

           With this property set to true, this VM will be able to send packets
           from this nic with MAC addresses that don't match the mac property.

           type: boolean
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes
           default: false

       nics.*.allow_restricted_traffic:

           With this property set to true, this VM will be able to send
           restricted network traffic (packets that are not IPv4, IPv6, or ARP)
           from this nic.

           type: boolean
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes
           default: false

       nics.*.allow_unfiltered_promisc:

           With this property set to true, this VM will be able to have multiple
           MAC addresses (eg. running SmartOS with VNICs).  Without this option
           these packets will not be picked up as only those unicast packets
           destined for the VNIC's MAC will get through.  Warning: do not enable
           this option unless you fully understand the security implications.

           type: boolean
           vmtype: KVM
           listable: yes (see above)
           create: yes
           update: yes
           default: false

       nics.*.blocked_outgoing_ports:

           Array of ports on which this nic is prevented from sending traffic.

           type: array
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes

       nics.*.allowed_ips:

           This sets additional IP addresses from which this nic is allowed to
           send traffic, in addition to the IPs in the ip and vrrp_primary_ip
           properties (if set). Values may be single IPv4 or IPv6 addresses
           or IPv4 and IPv6 CIDR ranges. The following are all valid
           examples of allowed_ips: '10.169.0.0/16', '10.99.99.7',
           'fe82::/15', '2600:3c00::f03c:91ff:fe96:a267'.

           type: array (of IP addresses or CIDR ranges)
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes

       nics.*.dhcp_server:

           With this property set to true, this VM will be able to operate as a
           DHCP server on this interface.  Without this, some of the packets
           required of a DHCP server will not get through.

           type: boolean
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes
           default: false

       nics.*.gateway:

           The IPv4 router on this network (not required if using DHCP)

           type: string (IPv4 address)
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes

       nics.*.interface:

           This is the interface name the the VM will see for this interface. It
           will always be in the format netX where X is an integer >= 0.

           type: string (netX)
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: no

       nics.*.ip:

           IPv4 unicast address for this NIC, or 'dhcp' to obtain address via
           DHCP.

           type: string (IPv4 address or 'dhcp')
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes

       nics.*.mac:

           MAC address of virtual NIC.

           type: string (MAC address)
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: no (see 'update' command description)
           default: we'll generate one

       nics.*.model:

           The driver for this NIC [virtio|e1000|rtl8139|...]

           type: string (one of ['virtio','e1000','rtl8139'])
           vmtype: KVM
           listable: yes (see above)
           create: yes
           update: yes
           default: the value of the nic_driver property on the VM

       nics.*.mtu:

           Sets the MTU for the network interface. The maximum MTU for a device is
           determined based on its nic tag. If this property is not set, then it
           defaults to the current MTU of the data link that the nic tag
           corresponds to. The supported range of MTUs is from 1500-9000 for
           VMs created on physical nics, and 576-9000 for VMs created on
           etherstubs or overlays.  This property is not updated live with vmadm
           update. If a specific MTU has not been requested, then this property
           is not present through get.

           type: integer
           vmtype: OS
           listable: no
           create: yes
           update: yes

       nics.*.netmask

           The netmask for this NIC's network (not required if using DHCP)

           type: string (IPv4 netmask, eg. 255.255.255.0)
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes

       nics.*.network_uuid

           UUID for allowing nics to be tracked in an external system

           type: string (UUID)
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes

       nics.*.nic_tag

           This option for a NIC determines which host NIC the VMs nic will be
           attached to. The value can be either a nic tag as listed in the 'NIC
           Names' field in `sysinfo`, or an etherstub or device name.

           type: string (device name or nic tag name)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update yes (requires zone stop/boot)

       nics.*.primary

           This option selects which NIC's default gateway and nameserver values
           will be used for this VM. If a VM has any nics, there must always be
           exactly one primary.  Setting a new primary will unset the old. Trying
           to set two nics to primary is an error.

           type: boolean (only true is valid)
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes (setting primary=true on one NIC removes the flag from the
               current primary, and sets on the new)

       nics.*.vlan_id:

           The vlan with which to tag this NIC's traffic (0 = none).

           type: integer (0-4095)
           vmtype: OS,KVM
           listable: yes (see above)
           create: yes
           update: yes
           default: 0

       nics.*.vrrp_primary_ip:

           The source IP that will be used to transmit the VRRP keepalive packets
           for this nic.  The IP must be the IP address of one of the other non-
           VRRP nics in this VM.

           type: string (IPv4 address)
           vmtype: OS
           listable: yes (see above)
           create: yes
           update: yes

       nics.*.vrrp_vrid:

           The VRRP Virtual Router ID for this nic.  This sets the MAC address
           of this nic to one based on the VRID.

           type: integer (0-255)
           vmtype: OS
           listable: yes (see above)
           create: yes
           update: yes

       nic_driver:

           This specifies the default values for nics.*.model for NICs attached to
           this VM.

           type: string (one of ['virtio','e1000','rtl8139'])
           vmtype: KVM
           listable: no
           create: yes
           update: yes

       nowait:

           This parameter is accepted when provisioning OS VMs and considers the
           provision complete when the VM is first started rather than waiting for
           the VM to be rebooted.

           type: boolean
           vmtype: OS
           listable: no
           create: yes
           update: no
           default: false

       owner_uuid:

           This parameter can be used for defining the UUID of an 'owner' for this
           VM. It serves no functional purpose inside the system itself, but can
           be used to tie this system to others.

           type: string (UUID)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes
           default: 00000000-0000-0000-0000-000000000000

       package_name:

           This is a private field intended for use by Joyent's SDC product.
           Other users can ignore this field.

           type: string
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes

       package_version:

           This is a private field intended for use by Joyent's SDC product.
           Other users can ignore this field.

           type: string
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes

       pid:

           For VMs that are currently running, this field indicates the PID of the
           `init` process for the zone.

           type: integer (PID)
           vmtype: OS,KVM
           listable: yes
           create: no
           update: no

       qemu_opts:

           This parameter allows one to specify additional arguments to be passed
           to the hypervisor. This is primarily designed to be used for debugging
           and should not be used beyond that. important: this replaces *all* of
           the options listed, so you need to include those from the default list
           that you want to keep. NOTE: setting this also overrides any SPICE
           options you might have set.

           type: string (space-separated options for qemu)
           vmtype: KVM
           listable: no
           create: yes
           update: yes
           default:
               if vnc_password.length != 0:
                   '-vnc unix:/tmp/vm.vnc,password -parallel none -usb -usbdevice tablet -k en-us'
               else
                   '-vnc unix:/tmp/vm.vnc -parallel none -usb -usbdevice tablet -k en-us'

       qemu_extra_opts:

           This allows you to specify additional qemu cmdline arguments, this
           string (if set) will be appended to the end of the qemu cmdline. It is
           intended for debugging and not for general use.

           type: string (space-separated options for qemu)
           vmtype: KVM
           listable: no
           create: yes
           update: yes

       quota:

           This sets a quota on the zone filesystem. For OS VMs, this value is the
           space actually visible/usable in the guest. For KVM VMs, this value is
           the quota for the Zone containing the VM, which is not directly
           available to users.

           Set quota to 0 to disable (ie. for no quota).

           type: integer (number of GiB)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes (live update)

       ram:

           For KVM VMs this is the amount of virtual RAM that will be available to
           the guest kernel. For OS VMs this will be the same as the property
           max_physical_memory.

           type: integer (number of MiB)
           vmtype: KVM
           listable: yes
           create: KVM VMs only
           update: KVM VMs only, for OS VMs update max_physical_memory instead.
           default: 256

       resolvers:

           For OS VMs, this value sets the resolvers which get put into
           /etc/resolv.conf at VM creation. If maintain_resolvers is set to
           true, updating this property will also update the resolvers in
           /etc/resolv.conf. For KVM VMs these will get passed as the resolvers
           with DHCP responses.

           type: array
           vmtype: OS,KVM
           listable: no
           create: yes
           update: yes

       routes:

           This is a key-value object that maps destinations to gateways. These
           will be set as static routes in the VM. The destinations can be either
           IPs or subnets in CIDR form. The gateways can either be IP addresses, or
           can be of the form "nics[0]", which specifies a link-local route on the
           numbered nic in that VM's nics array (the first nic is 0).  As an
           example:

               {
                   "10.2.2.0/24": "10.2.1.1",
                   "10.3.0.1": "nics[1]"
               }

           This sets two static routes: to the 10.2.2.0/24 subnet with a gateway
           of 10.2.1.1, and a link-local route to the host 10.3.0.1 over the VM's
           second nic.

           type: object
           vmtype: OS
           listable: no
           create: yes
           update: yes

       snapshots (EXPERIMENTAL):

           For OS VMs, this will display a list of snapshots from which you can
           restore the root dataset for your VM.  Currently this is only supported
           when your VM does not have any delegated datasets.

           type: array
           vmtype: OS
           listable: no
           create: no (but you can use create-snapshot)
           update: no (but you can use rollback-snapshot and delete-snapshot)

       spice_opts (EXPERIMENTAL):

           This property allows you to add additional -spice options when you are
           using SPICE. NOTE: SPICE support requires your KVM zone to be using a
           zone dataset with the image_uuid option and that image must know what
           to do with these special options.

           type: string (-spice XXX options)
           vmtype: KVM
           listable: no
           create: yes
           update: yes
           default: <unset>

       spice_password (EXPERIMENTAL):

           This property allows you to set a password which will be required when
           connecting to the SPICE port when SPICE is enabled. NOTE: SPICE support
           requires your KVM zone to be using a zone root dataset with the
           image_uuid option and that dataset must know what to do with these
           special options. IMPORTANT: this password will be visible from the GZ
           of the CN and anyone with access to the serial port in the guest. Set
           to an empty string (default) to not require a password at this level.

           type: string (8 chars max)
           vmtype: KVM
           listable: no
           create: yes
           update: yes
           default: <unset>

       spice_port (EXPERIMENTAL):

           This specifies the TCP port to listen on for the SPICE server. By
           default SPICE is not enabled. NOTE: SPICE support requires your KVM
           zone to be using a zone root dataset with the image_uuid option and
           that dataset must know what to do with these special options. If set to
           zero, a port will be chosen at random. Set to -1 to disable TCP
           listening for SPICE.

           type: integer (0 for random, -1 for disabled)
           vmtype: KVM
           listable: no
           create: yes
           update: yes
           default: <unset>

       state:

           This property exposes the current state of a VM.

           type: string
           vmtype: OS,KVM
           listable: yes
           create: no
           update: no

       tmpfs:

           This property specifies how much of the VM's memory will be available
           for the /tmp filesystem. This is only available for OS VMs, and doesn't
           make any sense for KVM VMs.

           If set to 0 this indicates that you would like to not have /tmp mounted
           as tmpfs at all. When changing to/from a "0" value, the VM must be
           rebooted in order for the change to take effect.

           vmtype: OS
           listable: yes
           create: yes
           update: yes
           default: max_physical_memory

       transition_expire:

           When a KVM VM is in transition from running to either 'off' (in the
           case of stop) or 'start' (in the case of reboot), the transition_expire
           field will be set. This value will indicate the time at which the
           current transaction will time out. When the transaction has timed out,
           vmadmd will force the VM into the correct state and remove the
           transition.

           type: integer (unix epoch timestamp)
           vmtype: KVM
           listable: no
           create: no (will show automatically)
           update: no

       transition_to:

           When a KVM VM is in transition from running to either 'off' (in the
           case of stop) or 'start' (in the case of reboot), the transition_to
           field will be set to indicate which state the VM is transitioning to.
           Additionally when a VM is provisioning you may see this with a value
           of 'running'.

           type: string value, one of: ['stopped', 'start', 'running']
           vmtype: OS,KVM
           listable: no
           create: no
           update: no

       type:

           This is a virtual field and cannot be updated. It will be 'OS' when the
           (brand == 'joyent*' || brand == 'sngl') and 'KVM' when the brand=='kvm'.

           type: string value, one of: ['OS', 'KVM']
           vmtype: OS,KVM
           listable: yes
           create: no, set by 'brand' property.
           update: no

       uuid:

           This is the unique identifer for the VM. If one is not passed in with
           the create request, a new UUID will be generated. It cannot be changed
           after a VM is created.

           type: string (UUID)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: no
           default: a new one is generated

       vcpus:

           For KVM VMs this parameter defines the number of virtual CPUs the guest
           will see. Generally recommended to be a multiple of 2.

           type: integer (number of CPUs)
           vmtype: KVM
           listable: yes
           create: KVM only
           update: KVM only (requires VM reboot to take effect)
           default: 1

       vga:

           This property allows one to specify the VGA emulation to be used by
           KVM VMs. The default is 'std'. NOTE: with the Qemu bundled in SmartOS
           qxl and xenfb do not work.

           type: string (one of: 'cirrus','std','vmware','qxl','xenfb')
           vmtype: KVM
           listable: no
           create: yes
           update: yes
           default: 'std'

       virtio_txburst:

           This controls how many packets can be sent on a single flush of the tx
           queue. This applies to all the vnics attached to this VM using the
           virtio model.

           type: integer
           vmtype: KVM
           listable: no
           create: yes
           update: yes
           default: 128

       virtio_txtimer:

           This sets the timeout for the TX timer.  It applies to all the vnics
           attached to this VM using the virtio model.

           type: integer (in nanoseconds)
           vmtype: KVM
           listable: no
           create: yes
           update: yes
           default: 200000

       vnc_password:

           This property allows you to set a password which will be required when
           connecting to the VNC port. IMPORTANT: this password will be visible
           from the GZ of the CN and anyone with access to the serial port in the
           guest. Set to an empty string (default) to not require a password at
           this level.

           type: string (8 chars max)
           vmtype: KVM
           listable: no
           create: yes
           update: yes
           default: <unset>

       vnc_port:

           This specifies the TCP port to listen on for the VNC server, the
           default is zero which means a port will be chosen at random. Set to -1
           to disable TCP listening.

           type: integer (0 for random, -1 for disabled)
           vmtype: KVM
           listable: no
           create: yes
           update: yes
           default: 0

       zfs_data_compression:

           Specifies a compression algorithm used for this VM's data dataset. This
           option affects only the delegated dataset and therefore only makes
           sense when the VM has been created with the delegate_dataset option.

           The caveats and warnings in the zfs_root_compression section below also
           apply to this option.

           type: string one of: "on,off,gzip,gzip-N,lz4,lzjb,zle"
           vmtype: OS
           listable: no
           create: yes
           update: yes (see warning in zfs_root_compression section)
           default: off

       zfs_data_recsize:

           This specifies the suggested block size for files in the delegated
           dataset's filesystem. It can only be set when your zone has a data
           dataset as added by the delegate_dataset option.

           The warnings and caveats for zfs_root_recsize also apply to this
           option. You should read and understand those before using this.

           type: integer (record size in bytes, 512 to 131072, must be power of 2)
           vmtype: OS (and only with a delegated dataset)
           listable: no
           create: yes
           update: yes (see caveat below under zfs_root_recsize)
           default: 131072 (128k)

       zfs_io_priority:

           This sets an IO throttle priority value relative to other VMs. If one
           VM has a value X and another VM has a value 2X, the machine with the
           X value will have some of its IO throttled when both try to use all
           available IO.

           type: integer (relative value)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: yes (live update)
           default: 100

       zfs_root_compression:

           Specifies a compression algorithm used for this VM's root dataset. This
           option affects only the zoneroot dataset. Setting to 'on' is equivalent
           to setting to 'lzjb'. If you want more information about the specific
           compression types, see the man page for zfs(1M).

           WARNING: If you change this value for an existing VM, only *new* data
           will be compressed. It will not rewrite existing data compress.

           NOTE: to change this property for KVM, see disks.*.zfs_compression
           above.

           type: string one of: "on,off,gzip,gzip-N,lz4,lzjb,zle"
           vmtype: OS
           listable: no
           create: yes
           update: yes (see warning above)
           default: off

       zfs_root_recsize:

           Specifies a suggested block size for files in the root file system.
           This property is designed solely for use with database workloads that
           access files in fixed-size records. ZFS automatically tunes block sizes
           according to internal algorithms optimized for typical access patterns.
           If you have a delegated dataset (with the delegate_dataset option) you
           should consider leaving this unset and setting zfs_data_recsize
           instead.

           WARNING: Use this property only if you know exactly what you're doing
           as it is very possible to have an adverse effect performance when
           setting this incorrectly. Also, when doing an update, keep in mind that
           changing the file system's recordsize affects only files created
           after the setting is changed; existing files are unaffected.

           NOTE: to change this property for KVM, see disks.*.zfs_recsize above.

           type: integer (record size in bytes, 512 to 131072, must be power of 2)
           vmtype: OS
           listable: no
           create: yes
           update: yes (see caveat above)
           default: 131072 (128k)

       zone_state:

           This property will show up when fetching a VMs JSON.  this shows the
           state of the zone in which this VM is contained. eg. 'running'.  It
           can be different from the 'state' value in several cases.

           type: string
           vmtype: KVM
           listable: yes
           create: no
           update: no

       zonepath:

           This property will show up in JSON representing a VM. It describes the
           path in the filesystem where you will find the VMs zone dataset. For OS
           VMs all VM data will be under this path, for KVM VMs this is where
           you'll find things such as the logs and sockets for a VM.

           type: string (path)
           vmtype: OS,KVM
           listable: no
           create: no (automatic)
           update: no

       zonename:

           This property indicates the zonename of a VM. The zonename is a private
           property and not intended to be used directly. For OS VMs you can set
           this property with the create payload, but such use is discouraged.

           type: string
           vmtype: OS,KVM
           listable: yes
           create: yes (OS VMs only)
           update: no
           default: value of uuid

       zoneid:

           This property will show up in a JSON payload and can be included in
           list output. It is however a value that is used internally to the
           system and primarily exists to aid debugging. This value will change
           whenever the VM is stopped or started. Do not rely on this value.

           type: integer
           vmtype: OS,KVM
           listable: yes
           create: no
           update: no

       zpool:

           This defines which ZFS pool the VM's zone dataset will be created in
           For OS VMs, this dataset is where all the data in the zone will live.
           For KVM VMs, this is only used by the zone shell that the VM runs in.

           type: string (zpool name)
           vmtype: OS,KVM
           listable: yes
           create: yes
           update: no
           default: zones



*** VM Spec
**** alias
     "alias": "smartos-lx-test",

**** autoboot
     "autoboot": "false",

**** brand
     "brand": "kvm|joyent",

**** ram
     "ram": 2048,

**** vcpus
     "vcpus": 3,

**** image_uuid
     "image_uuid": "3d09ec02-99c8-11e4-b1a2-8b0aedd63024"

**** disks image_uuid
     "disks": [
     {
     "boot": true,
     "model": "virtio",
     "image_uuid": "3d09ec02-99c8-11e4-b1a2-8b0aedd63024"
     }
     ],

**** disks zvol
     "disks": [
     {
     "boot": true,
     "model": "virtio",
     "size": 40960
     }
     ],

**** nics
     "nics": [
     {
     "nic_tag": "admin",
     "model": "virtio|e1000",
     "ip": "dhcp",
     "netmask": "dhcp",
     "gateway": "dhcp",
     "primary": 1
     }
     ]




*** COMMAND : /usr/bin/sysinfo -p
    # View system info

    Live_Image='20130629T040542Z'
    System_Type='SunOS'
    Boot_Time='1375215743'
    Manufacturer='VMware, Inc.'
    Product='VMware Virtual Platform'
    Serial_Number='VMware-56 4d 56 5e e8 ff 08 7b-38 81 e6 57 ac d8 b9 7d'
    VM_Capable='true'
    CPU_Type='Unknown'
    CPU_Virtualization='vmx'
    CPU_Physical_Cores=4
    Nic_Tags=admin
    Setup=''
    UUID='564d565e-e8ff-087b-3881-e657acd8b97d'
    Hostname='00-50-56-28-a8-14'
    CPU_Total_Cores=4
    MiB_of_Memory=8191
    Disk_c1t0d0_size_in_GB=268
    Disk_c1t1d0_size_in_GB=268
    NIC_admin='e1000g0'
    Network_Interface_e1000g0_MAC_Address='00:50:56:28:a8:14'
    Network_Interface_e1000g0_IPv4_Address='172.16.108.135'
    Network_Interface_e1000g0_NIC_Names='admin'
    Network_Interface_e1000g0_Link_Status='up'
    Network_Interface_e1000g1_MAC_Address='00:50:56:21:c3:ec'
    Network_Interface_e1000g1_IPv4_Address=''
    Network_Interface_e1000g1_NIC_Names=''
    Network_Interface_e1000g1_Link_Status='up'
    Bootparam_console='text'
    Bootparam_root_shadow='$5$2HOHRnK3$NvLlm.1KQBbB0WjoP7xcIwGnllhzp2HnT.mDO7DpxYA'
    Bootparam_smartos='true'

*** COMMAND : dladm create-vnic -l e1000g0 elk2
    # Create vnic over physical link

*** COMMAND : dladm create-vnic -l etherstub-link-name vnic-link-name
    # Create vnic over the etherstub
    dladm create-vnic -l etherstub0 vnic0

*** COMMAND : dladm show-link
    # Show physical links

    LINK        CLASS     MTU    STATE    BRIDGE     OVER
    e1000g0     phys      1500   up       vmwarebr   --
    e1000g1     phys      1500   up       --         --
    vmwarebr0   bridge    1500   up       --         e1000g0

*** COMMAND : dladm show-phys -m
    # Show physical nic mac address

*** COMMAND : svcadm restart vmadmd
    # Restart vmadmd daemon to reassign etherstub address for VNC?

*** COMMAND : uuid
    # Generate new UUID string

*** COMMAND : vmadm boot UUID order=cd,once=d cdrom=/debian.iso,ide
    # Boot from ISO image
    The order options are 'c' for the hard disk, 'd'
    for the first CD-ROM drive and 'n' for network boot. So the order
    'cdn' means boot the hard disk and if that fails try cdrom and if
    that fails try network boot.

*** COMMAND : vmadm create -f /opt/win2k12r2_vm.json
    # Create VM

*** COMMAND : vmadm info b8ab5fc1-8576-45ef-bb51-9826b52a4651 vnc
    # View VM VNC config
{
  "vnc": {
    "display": 39565,
    "port": 45465,
    "host": "10.99.99.7"
  }
}

*** COMMAND : vmadm update <VM-UUID> vnc_password=<password>
    # Update VM VNC password

*** COMMAND : prstat
    report active process statistics

*** COMMAND : zonememstat

*** COMMAND : ipfstat
    #

*** COMMAND : ipf
    #

*** COMMAND : ipnat
    #

*** COMMAND : ippool
    #

*** COMMAND : snoop
    # sniff network

*** COMMAND : fwadm
    # Manage SmartOS firewall rules



*** SMARTOS : Add cdrom
{{
  "add_disks": [
        {
        "boot": false,
        "model": "ide",
          "media": "cdrom",
          "path": "/en_sql_server_2012_standard_edition_with_sp1_x64_dvd_1228198.iso"
        }
      ]
}

*** SMARTOS : Add disks
{
  "add_disks": [
    {
      "boot": false,
      "model": "virtio",
      "block_size": 8192,
      "size": 40960
   }
 ]
}

*** SMARTOS : Add image database
    # sources.list file
    /var/db/imgadm/sources.list

    # Command
    imgadm sources -a http://datasets.at/
    imgadm sources -d https://images.joyent.com
    imgadm update

*** SMARTOS : Add SSH Public Key
"customer_metadata": {
    "root_authorized_keys": "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA8aQRt2JAgq6jpQOT5nukO8gI0Vst+EmBtwBz6gnRjQ4Jw8pERLlMAsa7jxmr5yzRA7Ji8M/kxGLbMHJnINdw/TBP1mCBJ49TjDpobzztGO9icro3337oyvXo5unyPTXIv5pal4hfvl6oZrMW9ghjG3MbIFphAUztzqx8BdwCG31BHUWNBdefRgP7TykD+KyhKrBEa427kAi8VpHU0+M9VBd212mhh8Dcqurq1kC/jLtf6VZDO8tu+XalWAIJcMxN3F3002nFmMLj5qi9EwgRzicndJ3U4PtZrD43GocxlT9M5XKcIXO/rYG4zfrnzXbLKEfabctxPMezGK7iwaOY7w== wooyay@houpla"
  }

"customer_metadata": {
    "administrator_pw": "fFqWLaUv4wUq71qg"
  }

*** SMARTOS : Boot to ISO
    vmadm start <UUID>  order=cd,once=d cdrom=/ubuntu-14.10-server-amd64.iso,ide && vmadm list && vmadm info <UUID> vnc

*** SMARTOS : Change CPU
vmadm update <zone id> vcpus=4

*** SMARTOS : Change hostname
    $ hostname "the-new-hostname" && hostname > /etc/nodename

*** SMARTOS : Change NIC
    # modify /usbkey/config

*** SMARTOS : Change NIC Tag
    nictagadm

*** SMARTOS : Change NTP
    # modify /usbkey/config

*** SMARTOS : Change Password
    /usr/lib/cryptpass somepassword
    Replace hash in /etc/shadow

*** SMARTOS : Change RAM
vmadm update <zone id> ram=4096

*** SMARTOS : Check process statistics
    prstat -Z

*** SMARTOS : Checking interrupt statistics
    intrstat

*** SMARTOS : Create etherstub
    dladm create-etherstub elk0

    nictagadm add -l elk0

    # Example
    Here is an example for the setup displayed above. This creates the etherstub, 2 vnics for the proxy vm, 1 vnic for each database and application servers.

    dladm create-etherstub vsw0
    dladm create-vnic -l trunk0 vpr0
    dladm create-vnic -l vsw0 vpr1
    dladm create-vnic -l vsw0 zdb0
    dladm create-vnic -l vsw0 zdb1
    dladm create-vnic -l vsw0 zapp0
    dladm create-vnic -l vsw0 zapp1
    dladm set-linkprop -p protection=mac-nospoof vpr0
    dladm set-linkprop -p protection=mac-nospoof vpr1
    dladm set-linkprop -p protection=mac-nospoof zdb0
    dladm set-linkprop -p protection=mac-nospoof zdb1
    dladm set-linkprop -p protection=mac-nospoof zapp0
    dladm set-linkprop -p protection=mac-nospoof zapp1

*** SMARTOS : Create nic tag
    nictagadm add [-v] [-l] [-p prop=value,...] <name> [mac]
    nictagadm delete [-v] [-f] <name>
    nictagadm exists [-lv] <name> [name1]...
    nictagadm list [-v]  [-l | -L] [-p] [-d delim]
    nictagadm update [-v] [-p prop=value,...] <name> [mac]
    nictagadm vms [-v] <name>

*** SMARTOS : Create VNIC
    dladm create-vnic -l <link-device> -v 128 <vnic-name0>
    # -v 128 above creates the vnic on VLAN ID 128
    # Omit -v option if not on a VLAN

    ifconfig elk0 plumb
    ifconfig elk0 inet 10.77.77.7 netmask 255.255.255.0 up
    ifconfig elk0 dhcp

    # plumb
    #       For a physical IP interface, open the datalink associated with the
    #       physical interface name and set up the plumbing needed for IP to
    #       use the datalink. When used with a logical interface name, this
    #       command is used to create a specific named logical interface on an
    #       existing physical IP interface.

    #       An interface must be separately plumbed for IPv4 and IPv6 according
    #       to the address_family parameter (IPv4 if unspecified). Before an
    #       interface has been plumbed, it will not be shown by ifconfig -a.

    #       Note that IPMP IP interfaces are not tied to a specific datalink
    #       and are instead created with the ipmp subcommand.

    Persistant VNIC
    # Modify /usbkey/config

    elk_nic=0:c:29:18:ec:10
    elk0_ip=10.77.77.7
    elk0_netmask=255.255.255.0
    elk0_gateway=10.77.77.1
    elk0_vlan_id=128

    elk0_ip=dhcp
    elk0_netmask=...

*** SMARTOS : Create Windows VM
    # First boot + virtio drivers
    vmadm boot b8ab5fc1-8576-45ef-bb51-9826b52a4651 order=cd,once=d cdrom=/Windows2008R2.iso,ide cdrom=/sdc-vm-tools-20111122163531.iso,ide

    # VM spec

*** SMARTOS : Custom SMF services
    # Go in /opt/custom/smf

**** Example: transient SMF manifest
     Save manifest as .xml

<?xml version='1.0'?>
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='export'>
  <service name='smartos/setup' type='service' version='0'>
    <create_default_instance enabled='true'/>
    <single_instance/>
    <dependency name='net-physical' grouping='require_all' restart_on='none' type='service'>
      <service_fmri value='svc:/network/physical'/>
    </dependency>
    <dependency name='filesystem' grouping='require_all' restart_on='none' type='service'>
      <service_fmri value='svc:/system/filesystem/local'/>
    </dependency>
    <exec_method name='start' type='method' exec='/opt/custom/share/svc/smartos_setup.sh %m' timeout_seconds='0'/>
    <exec_method name='stop' type='method' exec='/opt/custom/share/svc/smartos_setup.sh %m' timeout_seconds='60'/>
    <property_group name='startd' type='framework'>
      <propval name='duration' type='astring' value='transient'/>
    </property_group>
    <stability value='Unstable'/>
    <template>
      <common_name>
        <loctext xml:lang='C'>SmartOS Ad Hoc Setup Script</loctext>
      </common_name>
    </template>
  </service>
</service_bundle>

**** Example: method script

#!/bin/bash
# Simple Ad Hoc SmartOS Setup Service

set -o xtrace

. /lib/svc/share/smf_include.sh

cd /
PATH=/usr/sbin:/usr/bin:/opt/custom/bin:/opt/custom/sbin; export PATH

case "$1" in
'start')
    #### Insert code to execute on startup here.

    hostname "smartos01" && hostname > /etc/nodename

    ;;

'stop')
    ### Insert code to execute on shutdown here.
    ;;

*)
    echo "Usage: $0 { start | stop }"
    exit $SMF_EXIT_ERR_FATAL
    ;;
esac
exit $SMF_EXIT_OK

*** SMARTOS : Determine if VM are running out of memory
    zonememstat

*** SMARTOS : Determine what process is using RSS/memory
    prstat -s rss -z 12

*** SMARTOS : Determining how much system memory is allocated
    echo ::memstat | mdb -k

*** SMARTOS : Generating complete overview of SmartOS system
    sysinfo

{
  "Live Image": "20120726T184637Z",
  "System Type": "SunOS",
  "Boot Time": "1344477862",
  "Manufacturer": "Intel Corporation",
  "Product": "S5520UR",
  "Serial Number": "............",
  "VM Capable": true,
  "CPU Type": "Intel(R) Xeon(R) CPU E5645 @ 2.40GHz",
  "CPU Virtualization": "vmx",
  "CPU Physical Cores": 2,
  "UUID": "92bc54eb-a652-11e0-a095-001e671d5838",
  "Hostname": "smartos-node-1",
  "CPU Total Cores": 24,
  "MiB of Memory": "47184",
  "Zpool": "zones",
  "Zpool Disks": "c0t16d0,c0t17d0,c0t18d0,c0t19d0,c0t20d0,c0t21d0,c2d0",
  "Zpool Profile": "raidz",
  "Zpool Size in GiB": 2719,
  "Disks": {
    "c0t16d0": {"Size in GB": 600},
    "c0t17d0": {"Size in GB": 600},
    "c0t18d0": {"Size in GB": 600},
    "c0t19d0": {"Size in GB": 600},
    "c0t20d0": {"Size in GB": 600},
    "c0t21d0": {"Size in GB": 600},
    "c2d0": {"Size in GB": 120}
  },
  "Boot Parameters": {
    "console": "text",
    "root_shadow": "$5$2XXXRnK3$NvLlm.1KYYYB0WjoP7xcIwGnllzzzzHnT.mDO7DpxYA",
    "smartos": "true"
  },
  "Network Interfaces": {
    "igb0": {"MAC Address": "00:1e:67:1d:58:38", "ip4addr": "172.16.5.95", "Link Status": "up", "NIC Names": ["admin"]},
    "igb1": {"MAC Address": "00:1e:67:1d:58:39", "ip4addr": "", "Link Status": "unknown", "NIC Names": []}
  },
  "Virtual Network Interfaces": {
  }
}

*** SMARTOS : grub vga boot
    # grub> variable os_console vga

*** SMARTOS : HTTP/HTTPS Proxy
    Set http_proxy or https_proxy environment variables.
    
    e.g.:
    
    http_proxy=http://proxy.mycorp.com/ imgadm avail
    
    Or
    
    export http_proxy=http://proxy.mycorp.com/
    imgadm avail

*** SMARTOS : Log into zone
    # zlogin

*** SMARTOS : Lookup
    # vmadm lookup nics.*.ip=10.2.121.70
    54f1cc77-68f1-42ab-acac-5c4f64f5d6e0

    # vmadm lookup ram=128 alias=~^[ab]
    # vmadm lookup -j nics.*.ip=10.2.121.70
    returns json

*** SMARTOS : Make changes to /usbkey/config without reboot
    # sysinfo -u
    This makes the changes visible to 'sysinfo'

    -u	update the cache after making changes

*** SMARTOS : Network interface packet statistics in real-time
    netstat -I igb0 1 6

*** SMARTOS : Performance Monitoring
    dtrace
    prstat
    sar
    ostat
    kstat
    mpstat
    netstat
    nfsstat
    vmstat
    lockstat
    plockstat
    ptree
    vfsstat
    intrstat

*** SMARTOS : RAM DISK
    You can at a minimum create in the GZ and export it to the zone.
    You should be able to do it thus:
    
    ramdiskadm -a workdisk1 8180m
    zpool create ramworkdisk /dev/ramdisk/workdisk1
    zfs create ramworkdisk/tmpfs
    zfs set mountpoint=/tmpfs  ramworkdisk/tmpfs
    zfs set mountpoint=/zones/*******-d1ec-4035-b19f-aa77cb41c74a/root/tmpfs  ramworkdisk/tmpfs
    
    I just grabbed this out of my history so there may be gap or two.
    
    Yes, I likely should have called it '/tmpfs'.


*** SMARTOS : Remove disks
    echo '{"remove_disks": ["/dev/zvol/rdsk/zones/54f1cc77-68f1-42ab-acac-5c4f64f5d6e0-disk1"]}' | vmadm update UUID

*** SMARTOS : Seeing what is using a specific interrupt
    echo ::interrupts | mdb -k

*** SMARTOS : Seeing what is using SWAP space
    ps -eo pid,comm,vsz | sort -nk3

*** SMARTOS : Send VM
[root@headnode (bh1-kvm1:0) ~]# vmadm send UUID |ssh 10.0.1.4 vmadm receive
Password:
Succesfully sent VM 54f1cc77-68f1-42ab-acac-5c4f64f5d6e0
Succesfully received VM 54f1cc77-68f1-42ab-acac-5c4f64f5d6e0

*** SMARTOS : SmartDataCenter usb install
    # dd if=usb-release-20110901-20110922T212927Z-179-4gb.img of=/dev/rdsk/c3t0d0p0 bs=4096b

*** SMARTOS : Zones
**** Update nics
updatenics.json
{
    "update_nics": [
        {
            "mac": "f2:bb:de:ce:7d:e9",
            "ip": "10.0.1.200",
            "gateway": "10.0.1.1",
            "netmask": "255.255.254.0",
            "primary": true
        }
    ]
}


*** VM : Create Windows virtio disk drivers
    # Windows 2008 will not find the virtual hard disk unless you load the disk drivers
    http://ispire.me/how-to-create-smartos-windows-vm/

    # Virtio is the paravirtualization driver framewrowk, used in QEMU/KVM and VirtualBox hypervisors. In short, instead of emulating a real-world IDE/SCSI controller, the hypervisor emulates a device, specially designed to perform well in a virtualized environment. As a result, you get much better I/O performance, with less CPU usage on the host. On the downside, most operating systems, beside Linux and illumos, need additional drivers to communicate with the virtio device.

*** VM : Creating Custom VM Manifest

    https://wiki.smartos.org/display/DOC/vmadm+JSON+Quick+Reference
    uuid: The UUID of the image (use an online UUID generator)
    name: The name of the image (eg: "centos-6")
    version: The version of the image (eg: "1.0.0")
    description: A short description of the image
    published_at: A timestamp for the date of publication on an image server (this does not need to be accurate); to output the current time in the proper format use the command: date +"%Y-%m-%dT%T.000Z"
    creator_uuid: The UUID of the author of the image (use an online UUID generator if you don't have one)
    creator_name: The name of the image author
    urn: A special string for describing the image in the form "cloud_name:creator_name:name:version"; for the "cloud_name" I suggest "smartos" if you are unsure, the creator name is usually your organization. The string should not contain spaces. (eg: "smartos:cuddletech:plan9:1.0.0")
    type: The type of image, either "zvol" for KVM or "zone-dataset" for Zones
    os: The OS of this image (this is required, but not validated or used, so use whatever you like)
    files: An array of one or more file objects, containing the following properties for each:
        path: Local file path to the image data file (compressed zfs dump)
        sha1: The SHA1 for the image data file; to obtain the SHA1 hash use: digest -a sha1 <file>
        size: The file size of the image data file; to obtain use: ls -l <file>

**** Example Windows 2000 2012 R2 JSON
     # Used when importing as a new dataset
     # copy the new Dataset to your local Image Store
{
    "name": "win2k12r2de",
    "version": "1.0",
    "type": "zvol",
    "cpu_type": "host",
    "description": "Windows Server 2012 R2 Preview DE",
    "created_at": "2013-07-31T11:40:00.000Z",
    "updated_at": "2013-07-31T11:40:00.000Z",
    "published_at": "2013-07-31T11:40:00.000Z",
    "os": "windows",
    "image_size": "40960",
    "files": [
        {
            "path": "win2k12r2_de.zvol.gz",
            "sha1": "0d955b91973bdaccc30ffa75b856709ce9a1953a",
            "size": 3933399939
        }
    ],
    "requirements": {
        "networks": [
            {
                "name": "net0",
                "description": "public"
            }
        ]
    },
    "disk_driver": "ide",
    "nic_driver": "e1000",
    "uuid": "857ea9a0-f965-11e2-b778-0800200c9a66",
    "creator_uuid": "0e70a5a1-0115-4a2b-b260-94723fd31bf1",
    "vendor_uuid": "0e70a5a1-0115-4a2b-b260-94723fd31bf1",
    "owner_uuid": "0e70a5a1-0115-4a2b-b260-94723fd31bf1",
    "creator_name": "Philipp Haussleiter",
    "platform_type": "smartos",
    "urn": "smartos:phaus:win2k12r2de:1.0"
}

**** Example JSON
  {
    "uuid": "febaa412-6417-11e0-bc56-535d219f2590",
    "name": "smartos",
    "version": "1.3.12",
    "description": "Base template to build other templates on",

    "os": "smartos",
    "type": "zone-dataset",
    "platform_type": "smartos",
    "cloud_name": "sdc",
    "urn": "sdc:sdc:smartos:1.3.12",

    "creator_name": "sdc",
    "creator_uuid": "352971aa-31ba-496c-9ade-a379feaecd52",
    "vendor_uuid": "352971aa-31ba-496c-9ade-a379feaecd52",

    "created_at": "2011-04-11T08:45Z",
    "updated_at": "2011-04-11T08:45Z",
    "published_at": "2011-04-11T08:45Z",

    "files": [
      {
        "path": "smartos-1.3.12.zfs.bz2",
        "sha1": "246c9ae158dc8f204643afdd6bd4d3c4aa35e733",
        "size": 42016482,
        "url": "https://datasets.joyent.com/datasets/febaa412-6417-11e0-bc56-535d219f2590/smartos-1.3.12.zfs.bz2"
      }
    ],
    "requirements": {
      "networks": [
        {
          "name": "net0",
          "description": "public"
        }
      ]
    }
  }

*** VM : Create KVM VM json
{
  "alias": "elk",
  "brand": "kvm",
  "vcpus": 2,
  "autoboot": false,
  "ram": 800,
  "resolvers": ["8.8.8.8", "8.8.4.4"],
  "disks": [
    {
      "boot": true,
      "model": "virtio",
      "size": 20000
    }
  ],
  "nics": [
    {
      "nic_tag": "admin",
      "model": "virtio",
      "ip": "dhcp",
      "primary": 1
    }
  ]
}


*** SDC : Create USB
    # Linux
    dd if=usb-*.img of=/dev/sdb bs=1M

    # SmartOS
    dd if=usb-release-20110901-20110922T212927Z-179-4gb.img of=/dev/rdsk/c3t0d0p0 bs=4096b

    # Mac OS X
    tar -Ozxf usb-release-.tgz usb-.img | dd of=/dev/rdisk3 bs=1m

*** SDC : Headnode
    # Do not change the hostname of the server functioning as the head node

*** SDC : Headnode to act as a compute node
    sdcadm post-setup dev-headnode-prov

*** SDC : Set up external NICs
    sdcadm post-setup common-external-nics

*** SDC : Show network info
    sdc-netinfo

*** SDC : Troubleshooting
    /usbkey/scripts/mount-usb.sh && cat /mnt/usbkey/private/root.password.*
    bunyan $(svcs -L ur)

*** SDC : Updating password
    passwd
    sdc-image-sync


*** FiFo
    https://docs.project-fifo.net/en/stable/general/installation.html
